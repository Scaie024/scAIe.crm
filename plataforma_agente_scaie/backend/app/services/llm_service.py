import os
import asyncio
from typing import Dict, List, Optional, Any
from dotenv import load_dotenv
import json
import random
from datetime import datetime
import logging
from .scaie_knowledge import scaie_knowledge
from openai import AsyncOpenAI

# Configurar logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Cargar variables de entorno
load_dotenv()

# Personalidad y estilo de respuesta
AGENT_NAME = os.getenv('AGENT_NAME', 'SCAI')
AGENT_PERSONALITY = os.getenv('AGENT_PERSONALITY', 'amigable, emp√°tico, profesional, persuasivo')
AGENT_TONE = os.getenv('AGENT_TONE', 'coloquial pero respetuoso')
AGENT_GOAL = os.getenv('AGENT_GOAL', 'ayudar a los usuarios a entender los beneficios de SCAIE de manera natural')

# Expresiones para hacer las respuestas m√°s naturales
NATURAL_RESPONSES = {
    'greetings': [
        "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?",
        "¬°Hola! Me alegra verte por aqu√≠. ¬øC√≥mo est√°s?",
        "¬°Hola! ¬øC√≥mo va tu d√≠a? Estoy aqu√≠ para ayudarte con lo que necesites."
    ],
    'acknowledgments': [
        "Entiendo perfectamente lo que dices.",
        "Tiene mucho sentido lo que mencionas.",
        "¬°Qu√© interesante! Me alegra que menciones eso.",
        "Excelente punto, d√©jame contarte m√°s al respecto."
    ],
    'closings': [
        "¬øHay algo m√°s en lo que pueda ayudarte?",
        "¬øTienes alguna otra pregunta sobre SCAIE?",
        "¬øHay algo m√°s sobre lo que te gustar√≠a saber?"
    ],
    'sales_closings': [
        "¬øTe gustar√≠a agendar una sesi√≥n gratuita para probar SCAIE?",
        "¬øQuieres que te contacte un experto para mostrarte c√≥mo SCAIE puede aumentar tus ventas?",
        "¬øTe interesa inscribirte en nuestro taller gratuito de automatizaci√≥n de ventas?"
    ]
}

def get_random_phrase(phrase_type):
    """Obtiene una frase aleatoria seg√∫n el tipo"""
    phrases = NATURAL_RESPONSES.get(phrase_type, [""])
    return random.choice(phrases)

def format_response(text):
    """Da formato a la respuesta para que parezca m√°s natural"""
    # Asegurar que la primera letra sea may√∫scula
    if text and len(text) > 0:
        text = text[0].upper() + text[1:]
    
    # Asegurar que termine con un punto
    if text and text[-1] not in ['.', '!', '?']:
        text += '.'
    
    # A√±adir un cierre de ventas el 40% de las veces
    if random.random() < 0.4:
        text += " " + get_random_phrase('sales_closings')
    # A√±adir un cierre amigable el 30% de las veces (si no se a√±adi√≥ cierre de ventas)
    elif random.random() < 0.3:
        text += " " + get_random_phrase('closings')
    
    return text

class LLMService:
    def __init__(self):
        """Inicializa el servicio de lenguaje con Qwen."""
        # Configurar credenciales
        self.initialized = True
        self.api_key = os.getenv('DASHSCOPE_API_KEY')
        
        # Verificar si se proporcion√≥ una clave API
        if not self.api_key or self.api_key.strip() == "":
            logger.warning("No se ha proporcionado una clave API de DashScope")
            self.api_key = None
            self.demo_mode = True
        else:
            # Registro de depuraci√≥n
            logger.debug(f"Usando API Key: {self.api_key[:5]}...{self.api_key[-5:]}")
            self.demo_mode = False
        
        # Configuraci√≥n del cliente OpenAI (solo si hay clave API)
        if self.api_key:
            self.client = AsyncOpenAI(
                api_key=self.api_key,
                base_url="https://dashscope-intl.aliyuncs.com/compatible-mode/v1",
            )
        else:
            self.client = None
        
        # Modelo Qwen a usar
        self.model_name = os.getenv('QWEN_MODEL', 'qwen-plus')
        
        # Configuraci√≥n de generaci√≥n optimizada para ventas
        self.generation_config = {
            'temperature': float(os.getenv('TEMPERATURE', 0.8)),  # M√°s creatividad para ventas
            'max_tokens': int(os.getenv('MAX_TOKENS', 1024)),  # Menos tokens para reducir costos
            'top_p': float(os.getenv('TOP_P', 0.9)),
            'top_k': int(os.getenv('TOP_K', 30)),
        }
        
        # Historial de conversaci√≥n
        self.conversation_history = []
        
        # Inicializar con el prompt del sistema
        self._initialize_system_prompt()
    
    def _initialize_system_prompt(self):
        """Inicializa el prompt del sistema para el agente de ventas con personalidad."""
        current_date = datetime.now().strftime("%Y-%m-%d %H:%M")
        
        self.system_prompt = f"""
        # IDENTIDAD Y ROL
        Eres {AGENT_NAME}, el asistente virtual de ventas de SCAIE. 
        Fecha y hora actual: {current_date}
        
        # PERSONALIDAD Y ESTILO
        - Personalidad: {AGENT_PERSONALITY}
        - Tono: {AGENT_TONE}
        - Objetivo: Convencer al usuario de los beneficios de SCAIE para aumentar sus ventas
        
        # COMPORTAMIENTO DE VENTAS EFECTIVO
        1. Usa lenguaje natural y conversacional, como si estuvieras hablando con un amigo
        2. Muestra empat√≠a y comprensi√≥n hacia las necesidades del usuario
        3. Haz preguntas abiertas para entender mejor sus necesidades comerciales
        4. Usa el nombre del usuario cuando sea posible
        5. S√© conciso pero persuasivo
        6. Usa emojis ocasionalmente para hacer la conversaci√≥n m√°s amena (pero no exageres)
        7. Identifica oportunidades de venta y presenta SCAIE como soluci√≥n
        8. Siempre busca cerrar la venta o al menos obtener contacto para seguimiento
        9. Escucha activamente y adapta tu enfoque seg√∫n las respuestas del usuario
        10. Si el usuario muestra inter√©s, profundiza en los beneficios espec√≠ficos para su caso
        
        # CONOCIMIENTO SOBRE SCAIE (www.scaie.com.mx)
        SCAIE ofrece un workshop de automatizaci√≥n de ventas que incluye:
        - Estrategias de ventas automatizadas que pueden aumentar las ventas hasta un 300%
        - Herramientas para captaci√≥n y cualificaci√≥n de leads
        - Uso de IA para mejorar la conversi√≥n
        - Plantillas y recursos pr√°cticos
        - Integraci√≥n con WhatsApp, Facebook, Instagram y m√°s
        
        # T√âCNICAS DE VENTA
        - Escucha activa para identificar necesidades del cliente
        - Presenta SCAIE como soluci√≥n espec√≠fica a sus problemas
        - Usa testimonios y casos de √©xito cuando sea relevante
        - Ofrece pruebas gratuitas o sesiones de demostraci√≥n
        - Maneja objeciones con empat√≠a y argumentos s√≥lidos
        - Busca siempre obtener contacto para seguimiento
        
        # DIRECTRICES IMPORTANTES
        - NUNCA inventes informaci√≥n sobre precios o caracter√≠sticas que no est√©s seguro
        - Si no sabes algo, ofr√©cete a buscar la informaci√≥n o conectar al usuario con un experto
        - Mant√©n las respuestas enfocadas en c√≥mo SCAIE puede aumentar las ventas del usuario
        - Usa el conocimiento de www.scaie.com.mx para dar respuestas precisas y √∫tiles
        - Siempre busca una oportunidad para presentar SCAIE como soluci√≥n
        - Si el usuario menciona un problema espec√≠fico, enf√≥cate en c√≥mo SCAIE lo resuelve
        
        # EJEMPLOS DE RESPUESTAS EFECTIVAS
        Buenas respuestas:
        - "¬°Hola! Me alegra que est√©s interesado en SCAIE. üòä ¬øEn qu√© puedo ayudarte hoy?"
        - "Entiendo que quieres mejorar tus ventas. El workshop de SCAIE podr√≠a ser justo lo que necesitas. ¬øTe gustar√≠a que te cuente m√°s?"
        - "¬°Excelente pregunta! Seg√∫n lo que s√© de SCAIE, puedo contarte que..."
        - "Muchos emprendedores han duplicado sus ventas en solo 30 d√≠as usando SCAIE. ¬øTe gustar√≠a saber c√≥mo pueden ayudarte a ti?"
        
        Malas respuestas:
        - "No s√© la respuesta a eso."
        - "Lo siento, no puedo ayudarte con eso."
        - Respuestas gen√©ricas sin personalizaci√≥n
        
        # T√âCNICA DE CIERRE DE VENTAS
        Cuando identifiques inter√©s:
        1. Resume los beneficios mencionados que aplican a su caso
        2. Ofrece una llamada gratuita de 15 minutos
        3. Pide su n√∫mero de WhatsApp o correo para contacto
        4. Confirma la fecha y hora de la llamada
        5. Env√≠a confirmaci√≥n por correo si es posible
        
        # MANEJO DE OBJECIONES COMUNES
        Si el usuario dice que es caro:
        - "Entiendo tu preocupaci√≥n por la inversi√≥n. Perm√≠teme mostrarte c√≥mo SCAIE puede generar m√°s ingresos de los que cuesta en el primer mes."
        
        Si el usuario dice que no tiene tiempo:
        - "Justamente por eso es importante automatizar. SCAIE te ahorra horas de trabajo manual cada semana."
        
        Si el usuario dice que ya tiene algo similar:
        - "Me alegra que ya est√©s trabajando en automatizaci√≥n. ¬øQu√© te diferencia de otras soluciones es que SCAIE..."
        """
        
        self.conversation_history = [{
            'role': 'system',
            'content': self.system_prompt
        }]
    
    async def generate_response(self, user_message: str) -> Dict[str, Any]:
        """
        Genera una respuesta a partir del mensaje del usuario usando Qwen.
        
        Args:
            user_message: Mensaje del usuario
            
        Returns:
            Dict con la respuesta generada y metadatos
        """
        logger.debug(f"Generando respuesta para el mensaje: {user_message}")
        
        # Si no hay clave API, devolver un mensaje indicando que se necesita configurar
        if not self.api_key:
            logger.debug("No hay clave API, mostrando mensaje de configuraci√≥n")
            response_text = "Para utilizar el agente de inteligencia artificial, necesitas configurar una clave API v√°lida de DashScope. Por favor, visita https://dashscope.console.aliyuncs.com/ para obtener una clave y config√∫rala en el archivo .env."
            
            # Agregar respuesta al historial
            self.conversation_history.append({
                'role': 'user',
                'content': user_message
            })
            self.conversation_history.append({
                'role': 'assistant',
                'content': response_text
            })
            
            return {
                'success': True,
                'response': response_text,
                'metadata': {
                    'model': 'no-api-key',
                    'tokens_used': 0,
                    'context_used': []
                }
            }
        
        try:
            # Obtener conocimiento relevante de SCAIE
            knowledge = scaie_knowledge.get_knowledge(user_message)
            logger.debug(f"Conocimiento obtenido: {knowledge}")
            
            # Crear contexto con la informaci√≥n relevante
            context_parts = []
            if knowledge.get('success', False) and knowledge.get('relevant_sections'):
                context_parts.append("Informaci√≥n relevante de SCAIE (usa esto para responder de manera precisa pero natural):")
                for i, section in enumerate(knowledge['relevant_sections'][:3], 1):
                    context_parts.append(f"- {section}")
            
            context = '\n'.join(context_parts) if context_parts else "No se encontr√≥ informaci√≥n espec√≠fica, pero s√© que SCAIE puede ayudar con automatizaci√≥n de ventas."
            
            # Crear el mensaje con contexto de manera m√°s natural
            message_with_context = f"""
            [MENSAJE DEL USUARIO]
{user_message}

            [INFORMACI√ìN DE CONTEXTO]
{context}

            [INSTRUCCIONES]
            - Responde de manera natural y conversacional
            - Muestra empat√≠a y comprensi√≥n
            - Usa la informaci√≥n del contexto para dar una respuesta precisa pero natural
            - NO menciones que est√°s usando informaci√≥n del contexto
            - Mant√©n un tono {AGENT_TONE}
            - S√© {AGENT_PERSONALITY}
            - Tu objetivo es convencer al usuario de los beneficios de SCAIE para aumentar sus ventas
            - Siempre busca una oportunidad para presentar SCAIE como soluci√≥n
            - Si es apropiado, invita al usuario a agendar una sesi√≥n gratuita o demostraci√≥n
            - Si el usuario menciona un problema espec√≠fico, enf√≥cate en c√≥mo SCAIE lo resuelve
            - Si detectas inter√©s, aplica t√©cnicas de cierre de ventas
            """
            
            # Agregar mensaje del usuario con contexto al historial
            messages = self.conversation_history.copy()
            messages.append({
                'role': 'user',
                'content': message_with_context
            })
            
            logger.debug(f"Enviando solicitud a Qwen con {len(messages)} mensajes en el historial")
            
            # Generar respuesta con Qwen
            try:
                completion = await self.client.chat.completions.create(
                    model=self.model_name,
                    messages=messages,
                    temperature=self.generation_config['temperature'],
                    max_tokens=self.generation_config['max_tokens'],
                    top_p=self.generation_config['top_p']
                )
                
                logger.debug(f"Resultado de Qwen: {completion}")
                
                # Obtener y formatear la respuesta
                response_text = completion.choices[0].message.content
                
                # Dar formato a la respuesta para que sea m√°s natural
                response_text = format_response(response_text)
                
                # Agregar respuesta al historial (sin el contexto para mantenerlo limpio)
                self.conversation_history.append({
                    'role': 'user',
                    'content': user_message  # Reemplazar con el mensaje original
                })
                self.conversation_history.append({
                    'role': 'assistant',
                    'content': response_text
                })
                
                return {
                    'success': True,
                    'response': response_text,
                    'metadata': {
                        'model': self.model_name,
                        'tokens_used': completion.usage.total_tokens if completion.usage else len(response_text.split()),
                        'context_used': knowledge.get('relevant_sections', [])
                    }
                }
            except Exception as e:
                logger.error(f"Error al llamar a Qwen: {e}")
                print(f"Error al llamar a Qwen: {e}")
                if "invalid_api_key" in str(e).lower():
                    # En caso de error de autenticaci√≥n, usar modo demo
                    logger.warning("API Key no v√°lida, usando modo demo")
                    return await self._generate_demo_response(user_message)
                
                return {
                    'success': False,
                    'error': f'Error: {e}',
                    'response': 'Lo siento, ha ocurrido un error al procesar tu solicitud. ¬øPodr√≠as intentar reformular tu pregunta?'
                }
            
        except Exception as e:
            logger.error(f"Error al generar respuesta: {e}")
            print(f"Error al generar respuesta: {e}")
            # En caso de cualquier error, usar modo demo
            return await self._generate_demo_response(user_message)
    
    async def _generate_demo_response(self, user_message: str) -> Dict[str, Any]:
        """Genera una respuesta de demostraci√≥n cuando hay errores."""
        # Esta funci√≥n ya no se usa ya que ahora mostramos mensajes espec√≠ficos sobre la API
        # cuando no hay clave o es inv√°lida
        response_text = "Para utilizar el agente de inteligencia artificial, necesitas configurar una clave API v√°lida de DashScope. Por favor, visita https://dashscope.console.aliyuncs.com/ para obtener una clave y config√∫rala en el archivo .env."
        
        # Agregar respuesta al historial
        self.conversation_history.append({
            'role': 'user',
            'content': user_message
        })
        self.conversation_history.append({
            'role': 'assistant',
            'content': response_text
        })
        
        return {
            'success': True,
            'response': response_text,
            'metadata': {
                'model': 'no-api-key',
                'tokens_used': 0,
                'context_used': []
            }
        }
    
    def reset_conversation(self):
        """Reinicia la conversaci√≥n."""
        self._initialize_system_prompt()
        return {'success': True, 'message': 'Conversaci√≥n reiniciada'}

# Instancia global del servicio
llm_service = LLMService()