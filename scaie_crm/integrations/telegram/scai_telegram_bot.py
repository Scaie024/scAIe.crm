#!/usr/bin/env python3
"""
Bot de Telegram SCAI simplificado y funcional
Bot: @scAIebot (t.me/scAIebot)
"""

import os
import sys
import logging
import asyncio
import httpx
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Cargar variables de entorno desde la ra√≠z del proyecto
load_dotenv('../../.env')

# Token del bot y URL del backend
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
BACKEND_URL = os.getenv('BACKEND_URL', 'http://127.0.0.1:8000')

if not TELEGRAM_BOT_TOKEN:
    print("‚ùå Error: TELEGRAM_BOT_TOKEN no encontrado en .env")
    sys.exit(1)

# A√±adir el path del backend para importar servicios
sys.path.append('../../core/backend/src/scaie')

# Respuestas predefinidas para el agente
WORKSHOP_INFO = """
üéØ **Workshop: "S√© m√°s eficiente con IA"**

üí° Capacita a tu equipo para usar IA sin c√≥digo y mejora la productividad en todos los departamentos.

üìÖ **Modalidades:**
‚Ä¢ Online en vivo (recomendado)
‚Ä¢ Presencial 
‚Ä¢ H√≠brido

üí∞ **Precios:**
‚Ä¢ B√°sico: $1,499 MXN (2 horas, hasta 10 personas)
‚Ä¢ Profesional: $2,999 MXN (4 horas, hasta 20 personas)
‚Ä¢ Empresarial: $5,000 MXN (contenido espec√≠fico)

üéÅ **Incluye:**
‚Ä¢ Manual del workshop
‚Ä¢ Grabaci√≥n de la sesi√≥n
‚Ä¢ Sesi√≥n de seguimiento (30 minutos)
‚Ä¢ Acceso a herramientas freemium

üìû **Contacto:** 55 3591 3417
üåê **Web:** www.scaie.com.mx
üìÖ **Agendar:** https://calendly.com/scaie-empresa/30min
"""

class ScaiBot:
    def __init__(self):
        # TELEGRAM_BOT_TOKEN ya fue validado arriba
        self.token = TELEGRAM_BOT_TOKEN
        self.application = Application.builder().token(str(self.token)).build()

        # Registrar handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("workshop", self.workshop_command))
        self.application.add_handler(CommandHandler("contacto", self.contact_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /start"""
        user = update.effective_user
        if not user or not update.message:
            return
        welcome_message = f"""
üëã ¬°Hola {user.first_name}! Soy SCAI, tu asistente de IA especializado en automatizaci√≥n empresarial.

üéØ ¬øQuieres que tu equipo trabaje un 50-300% m√°s eficiente? 

Descubre c√≥mo puedes:
‚úÖ Automatizar tareas repetitivas en minutos
‚úÖ Tomar decisiones basadas en datos
‚úÖ Generar contenido profesional al instante
‚úÖ Romper la brecha de conocimiento en tu equipo

üí° Solo dime... ¬øEn qu√© √°rea te gustar√≠a mejorar primero?

Puedes consultarme sobre:
‚Ä¢ Automatizaci√≥n de procesos
‚Ä¢ An√°lisis de datos
‚Ä¢ Generaci√≥n de contenido
‚Ä¢ Y mucho m√°s...

üìå Usa /workshop para ver nuestro programa completo
üìå Usa /contacto para hablar con un experto
        """
        if update.message:
            await update.message.reply_text(welcome_message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /help"""
        help_message = """
üÜò **GU√çA DE USO - SCAI**

üß† Estoy dise√±ado para ayudarte con todo relacionado con inteligencia artificial y automatizaci√≥n empresarial. Puedes:

üìå Comandos principales:
/start - Reiniciar conversaci√≥n
/workshop - Conocer nuestro programa de capacitaci√≥n
/contacto - Datos de contacto
/help - Mostrar esta gu√≠a

üí° Preg√∫ntame sobre:
‚Ä¢ C√≥mo implementar IA en tu negocio
‚Ä¢ Soluciones espec√≠ficas para tu industria
‚Ä¢ Casos pr√°cticos de √©xito
‚Ä¢ Automatizaci√≥n de tareas repetitivas
‚Ä¢ An√°lisis y visualizaci√≥n de datos

‚ú® Consejo: Cuanto m√°s espec√≠fico seas sobre tus necesidades, mejor podr√© ayudarte.

üìû ¬øPrefieres hablar con un humano? 
Usa /contacto para conectarte con nuestro equipo de expertos.

        """
        if update.message:
            await update.message.reply_text(help_message)
    
    async def workshop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /workshop"""
        if update.message:
            await update.message.reply_text(WORKSHOP_INFO)
    
    async def contact_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Comando /contacto"""
        contact_message = """
üìû **CONTACTO - SCAI**

üì± **Tel√©fono:** 55 3591 3417
üåê **Website:** www.scaie.com.mx
üìÖ **Agenda una llamada gratuita:** https://calendly.com/scaie-empresa/30min

üí¨ **¬øPrefieres otra opci√≥n?**
üìß Email: info@scaie.com.mx
üì± WhatsApp: [Enviar mensaje](https://wa.me/525535913417)

üïí **Horarios de atenci√≥n:**
Lunes a Viernes: 9:00 AM - 6:00 PM (GMT-6)

üéØ **Oferta especial:** Esta semana tenemos cupo limitado para sesiones personalizadas. ¬øTe gustar√≠a agendar una llamada gratuita de 15 minutos para ver c√≥mo podemos ayudar a tu empresa?
        """
        if update.message:
            await update.message.reply_text(contact_message)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manejar mensajes de texto"""
        user = update.effective_user
        if not user or not update.message or not update.effective_chat:
            return
        
        message_text = update.message.text or ""

        logger.info(
            f"Mensaje de @{getattr(user, 'username', None) or getattr(user, 'first_name', 'usuario')}: {message_text}"
        )

        # Enviar al backend para una respuesta coherente via LLM
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

            # Obtener respuesta del backend
            response_text = await self.ask_backend(message_text, user)
            
            # Enviar respuesta al usuario
            await update.message.reply_text(response_text)
            
        except Exception as e:
            logger.error(f"Error procesando mensaje: {str(e)}")
            error_message = """
‚ö†Ô∏è Lo siento, estoy experimentando algunas dificultades t√©cnicas en este momento.

üîß Mientras resolvemos el problema, puedes contactarnos directamente:

üì± WhatsApp: [55 3591 3417](https://wa.me/525535913417)
üåê Agenda una llamada: https://calendly.com/scaie-empresa/30min
üìß Email: info@scaie.com.mx

‚è≥ Vuelve en unos minutos para probar el servicio nuevamente. ¬°Agradecemos tu paciencia!
            """
            await update.message.reply_text(error_message)

    async def ask_backend(self, message_text: str, user) -> str:
        """Env√≠a el mensaje al backend (omnipotent-agent) y devuelve la respuesta del LLM."""
        # Usar el endpoint versionado y el esquema esperado por el backend (MessageRequest)
        url = f"{BACKEND_URL.rstrip('/')}/api/v1/omnipotent-agent/process-message"
        payload = {
            "message": message_text,
            "contact": {
                "name": getattr(user, 'first_name', None) or getattr(user, 'username', 'Usuario'),
                "phone": None,  # Opcional, podr√≠amos pedirlo si es necesario
                "email": None,   # Opcional, podr√≠amos pedirlo si es necesario
                "platform": "telegram",
                "platform_user_id": str(getattr(user, 'id', ''))
            }
        }
        timeout = httpx.Timeout(15.0, connect=5.0)
        async with httpx.AsyncClient(timeout=timeout) as client:
            resp = await client.post(url, json=payload)
            resp.raise_for_status()
            data = resp.json()
            return data.get("response", "") or "Disculpa, no pude generar respuesta en este momento."

def main():
    """Funci√≥n principal"""
    print("ü§ñ SCAI - Bot de Telegram")
    print("=" * 40)
    print("Bot: @scAIebot")
    print("URL: https://t.me/scAIebot")
    print("=" * 40)
    
    bot = ScaiBot()
    # run_polling es bloqueante y maneja init/start/stop internamente en PTB v20+
    bot.application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()